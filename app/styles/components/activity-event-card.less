
.activity-event-card  {

  position: relative;

  width: @yp-activity-event-card-width;
  .game-card();

  line-height: 1.2em;
  background: white;

  > div {
    padding: 0 4px;
  }

  i {
    font-size: 14px;
  }

  > div:first-of-type {

    height: @yp-activity-event-image-height;

    display: flex;
    justify-content:center;
    align-content:center;
    flex-direction:column;

    img {

      position: absolute;

      width: @yp-activity-event-image-width;
      height: @yp-activity-event-image-height;

      top: 0;
      right: 0;
    }

  }


  .title {
    white-space: normal;
    min-height: 3em;
    text-align: left;
    display: flex;
    justify-content:center;
    align-content:center;
    flex-direction:column;
    p {
      margin: 0;
      padding-left: 4px;
    }
  }

  .invisible {
    visibility: hidden;
  }

  .status, .rating {
    padding-top: 4px;
    > div:first-of-type {
      padding-top: 8px;
      padding-left: 2px;
    }
    > div {
      display: inline-block;
    }

    clear: both;

    .control {
      float: right;
      i.fa-times.active {
        color: @yp-color-red;
      }
      i {
        font-size: 26px;
      }
    }
  }

}

.height-recommendation {
  height: 9em;
  width: @yp-activity-event-card-width;
}

.pos(@index) {
  top: @index * @yp-activity-event-offset;
  z-index: @index;
}
.pos-past(@index) {
  top: @index * @yp-activity-event-offset * 5;
  z-index: @index;
}

.height(@max) {
  height: @yp-activity-event-card-height + @max * @yp-activity-event-offset;
  width: @yp-activity-event-card-width;
}
.height-invitation(@max) {
  height: @yp-activity-event-card-height + @max * @yp-activity-event-offset + 46px;
  width: @yp-activity-event-card-width;
}

@iterations: 30;

// helper class, will never show up in resulting css
// will be called as long the index is above 0
.loopingClass (@index) when (@index >= 0) {

  // create the actual css selector, example will result in
  // .myclass_30, .myclass_28, .... , .myclass_1

  .pos-@{index} {
    .pos(@index);
  }

  .past, .dismissed {
    .pos-@{index} {
      .pos-past(@index);
    }
  }

  .height-@{index} {
    .height(@index);
  }

  .invitation.height-@{index} {
    .height-invitation(@index);
  }

  // next iteration
  .loopingClass(@index - 1);
}

// end the loop when index is 0
.loopingClass (0) {}

// "call" the loopingClass the first time with highest value
.loopingClass (@iterations);